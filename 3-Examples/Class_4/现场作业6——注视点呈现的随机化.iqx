Design: 奇偶判断任务，随机呈现数字1~8，被试根据数字是奇数还是偶数做出按键反应，考察个体的反应时与正确率。

*****注视点呈现时间的随机化*****

step_1: 定义item (功能：呈现的独立模块内容，在本案例中即1~8，分为两种，一种是奇数，一种是偶数)

//在这里增加指导语内容，告知被试任务要求。


<values>
	/fixationtime = 0
</values>

<expressions>
	/generaterandom = ceil(rand(400,600))
</expressions>


<item introductionitem>
/ 1 = "请将左数和右手的食指分别放在键盘的“F”键和“J”键上；在屏幕的中央会随机出现1~8之间的数字，请判断数的奇偶；如果是奇数（1,3,5,7）请按“F”键，如果是偶数（2,4,6,8）请按“J”键。"

</item>

<item anykeyitem>
/ 1 = "如果您对指导语没有疑问，请按任意键开始实验"
</item>

<item oddnumber>
/ 1 = "1"
/ 2 = "3"
/ 3 = "5"
/ 4 = "7"
</item>

<item evennumber>
/ 1 = "2"
/ 2 = "4"
/ 3 = "6"
/ 4 = "8"
</item>

<item fixation>
/ 1 = "+"
</item>

<item correctitem>
/ 1 = "√"
</item>

<item erroritem>
/ 1 = "×"
</item>

step_2：定义stimulus (功能：定义数字的呈现方式，首先是定义目标，选择规范那些刺激的格式，其次是字体，文字颜色，文字背景颜色)

<text oddnumbertxt>
/ items = oddnumber
/ fontstyle = ("Fixedsys", 10%, false, false, false, false, 5, 1)
/ txcolor = (255, 255, 255)
/ txbgcolor = (0, 0, 0)
</text>

<text evennumbertxt>
/ items = evennumber
/ fontstyle = ("Fixedsys", 10%, false, false, false, false, 5, 1)
/ txcolor = (255, 255, 255)
/ txbgcolor = (0, 0, 0)
</text>

<text fixationtxt>
/ items = fixation
/ fontstyle = ("Arial Black", 5%, true, false, false, false, 5, 1)
/ txcolor = (255, 255, 255)
/ txbgcolor = (0, 0, 0)
</text>

<text correcttxt>
/ items = correctitem
/ fontstyle = ("Arial Black", 5%, true, false, false, false, 5, 1)
/ position = (50%,70%)
/ txcolor = (0, 255, 0)
/ txbgcolor = (0, 0, 0)
</text>

<text errortxt>
/ items = erroritem
/ fontstyle = ("Arial Black", 5%, true, false, false, false, 5, 1)
/ position = (50%,70%)
/ txcolor = (255, 0, 0)
/ txbgcolor = (0, 0, 0)
</text>

<text introductiontxt>
/items = introductionitem
/fontstyle = ("宋体", 24pt)
/txbgcolor = (transparent)
/txcolor = (0,255,0)
</text>


<text anykeytxt>
/items = anykeyitem
/vposition = 70%
/fontstyle = ("宋体", 24pt)
/txcolor = (255,0,0)
/txbgcolor = (transparent)
</text>

step_3: 定义trail (功能：定义每个试次，刺激什么时候出现，接受那些被试反应，那些反应时正确的或错误的，正确或错误之后呈现什么内容)

<trial introduction>
/ validresponse = (anyresponse)
/ stimulustimes = [1 = introductiontxt, anykeytxt]
/ recorddata = false
</trial>


<trial oddnumbertrial>
/ pretrialpause = 500
/ validresponse = ("F","J")
/ correctresponse = ("F")
/ correctmessage = (correcttxt,300)
/ errormessage = (errortxt,300)
/ responsemode = correct
/ontrialbegin = [values.fixationtime = expressions.generaterandom]
/ontrialbegin = [trial.oddnumbertrial.insertstimulustime(text.fixationtxt, 0)]
/ontrialbegin = [trial.oddnumbertrial.insertstimulustime(text.oddnumbertxt,values.fixationtime)]
/ontrialend = [trial.oddnumbertrial.clearstimulusframes()]
</trial>

<trial evennumbertrial>
/ pretrialpause = 500
/ validresponse = ("F","J")
/ correctresponse = ("F")
/ correctmessage = (correcttxt,300)
/ errormessage = (errortxt,300)
/ responsemode = correct
/ontrialbegin = [values.fixationtime = expressions.generaterandom]
/ontrialbegin = [trial.evennumbertrial.insertstimulustime(text.fixationtxt, 0)]
/ontrialbegin = [trial.evennumbertrial.insertstimulustime(text.evennumbertxt,values.fixationtime)]
/ontrialend = [trial.evennumbertrial.clearstimulusframes()]
</trial>

step_4: 定义block (功能：定义试次的呈现顺序和一些基本设定信息)

<block introductionblk>
/ screencolor = (0, 0, 0)
/ trials = [1 = introduction]
</block>

<block oddevenblk>
/ screencolor = (0, 0, 0)
/ blockfeedback = (meanlatency,correct)
/ trials = [1-16 = noreplace(oddnumbertrial, evennumbertrial)]
</block>

step_5: 定义experiment (功能：定义实验如何设定区块)

<expt oddeventask>
/ blocks = [1 = introductionblk; 2 = oddevenblk]
</expt>




